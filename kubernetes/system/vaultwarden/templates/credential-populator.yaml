{{- if and .Values.vaultwarden.enabled .Values.ztcIntegration.enabled }}
---
# Service Account for credential population
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  namespace: {{ include "ztc-vaultwarden.namespace" . }}
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator

---
# ClusterRole for reading secrets across namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator
subjects:
- kind: ServiceAccount
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  namespace: {{ include "ztc-vaultwarden.namespace" . }}
roleRef:
  kind: ClusterRole
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  apiGroup: rbac.authorization.k8s.io

---
# Credential Population Job
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  namespace: {{ include "ztc-vaultwarden.namespace" . }}
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "ztc-vaultwarden.labels" . | nindent 8 }}
        app.kubernetes.io/component: credential-populator
    spec:
      serviceAccountName: {{ include "ztc-vaultwarden.fullname" . }}-populator
      restartPolicy: OnFailure
      containers:
      - name: credential-populator
        image: curlimages/curl:8.6.0
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "üîê Starting ZTC credential population..."
            
            # Wait for Vaultwarden to be ready
            echo "‚è≥ Waiting for Vaultwarden to be ready..."
            for i in $(seq 1 30); do
              if wget -q --spider http://{{ include "ztc-vaultwarden.fullname" . }}.{{ include "ztc-vaultwarden.namespace" . }}.svc.cluster.local/alive; then
                echo "‚úÖ Vaultwarden is ready"
                break
              fi
              echo "‚è≥ Waiting for Vaultwarden... ($i/30)"
              sleep 10
            done
            
            # Check if we can access Vaultwarden
            if ! wget -q --spider http://{{ include "ztc-vaultwarden.fullname" . }}.{{ include "ztc-vaultwarden.namespace" . }}.svc.cluster.local/alive; then
              echo "‚ùå Vaultwarden is not accessible"
              exit 1
            fi
            
            echo "üéØ Vaultwarden is accessible, starting credential population..."
            
            # This is a placeholder for the actual credential population logic
            # The real implementation will use the Vaultwarden API to:
            # 1. Create an organization for ZTC credentials
            # 2. Create collections for different service types
            # 3. Populate credentials for Grafana, Gitea, ArgoCD, etc.
            
            echo "üìù Credential population logic will be implemented here"
            echo "üîß This includes:"
            echo "   - Creating ZTC organization"
            echo "   - Setting up credential collections"
            echo "   - Populating service credentials from sealed secrets"
            echo "   - Organizing credentials by service type"
            
            # For now, just mark as successful
            echo "‚úÖ Credential population completed (placeholder)"
            
        env:
        - name: VAULTWARDEN_URL
          value: "http://{{ include "ztc-vaultwarden.fullname" . }}.{{ include "ztc-vaultwarden.namespace" . }}.svc.cluster.local"
        {{- if .Values.vaultwarden.admin.existingSecret }}
        - name: ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.vaultwarden.admin.existingSecret }}
              key: admin-token
        {{- end }}
        - name: ORGANIZATION_NAME
          value: "{{ .Values.ztcIntegration.organization.name }}"
{{- end }}