{{- if .Values.vaultwarden.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}
  namespace: {{ include "ztc-vaultwarden.namespace" . }}
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate  # Ensure single instance for data consistency
  selector:
    matchLabels:
      {{- include "ztc-vaultwarden.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ztc-vaultwarden.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
      {{- end }}
      containers:
      - name: vaultwarden
        image: "{{ .Values.vaultwarden.image.repository }}:{{ .Values.vaultwarden.image.tag }}"
        imagePullPolicy: {{ .Values.vaultwarden.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        env:
        - name: DOMAIN
          value: "{{ .Values.vaultwarden.config.domain }}"
        - name: WEBSOCKET_ENABLED
          value: "{{ .Values.vaultwarden.config.websocketEnabled }}"
        - name: DATA_FOLDER
          value: "{{ .Values.vaultwarden.config.dataFolder }}"
        - name: ROCKET_TLS
          value: "{{ .Values.vaultwarden.config.rocket.tls }}"
        - name: ROCKET_PORT
          value: "{{ .Values.vaultwarden.config.rocket.port }}"
        - name: SIGNUPS_ALLOWED
          value: "{{ .Values.vaultwarden.admin.signupsAllowed }}"
        {{- if .Values.vaultwarden.admin.existingSecret }}
        - name: ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.vaultwarden.admin.existingSecret }}
              key: admin-token
        {{- end }}
        volumeMounts:
        - name: vaultwarden-data
          mountPath: {{ .Values.vaultwarden.config.dataFolder }}
        {{- if .Values.vaultwarden.resources }}
        resources:
          {{- toYaml .Values.vaultwarden.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.vaultwarden.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.vaultwarden.livenessProbe.httpGet.path }}
            port: {{ .Values.vaultwarden.livenessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.vaultwarden.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.vaultwarden.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.vaultwarden.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.vaultwarden.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.vaultwarden.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.vaultwarden.readinessProbe.httpGet.path }}
            port: {{ .Values.vaultwarden.readinessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.vaultwarden.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.vaultwarden.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.vaultwarden.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.vaultwarden.readinessProbe.failureThreshold }}
        {{- end }}
      volumes:
      - name: vaultwarden-data
        {{- if .Values.storage.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "ztc-vaultwarden.fullname" . }}-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }}