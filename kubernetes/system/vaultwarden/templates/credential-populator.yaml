{{- if and .Values.vaultwarden.enabled .Values.ztcIntegration.enabled }}
---
# Service Account for credential population
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  namespace: {{ include "ztc-vaultwarden.namespace" . }}
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator

---
# ClusterRole for reading secrets across namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator
subjects:
- kind: ServiceAccount
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  namespace: {{ include "ztc-vaultwarden.namespace" . }}
roleRef:
  kind: ClusterRole
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  apiGroup: rbac.authorization.k8s.io

---
# Credential Population Job
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ztc-vaultwarden.fullname" . }}-populator
  namespace: {{ include "ztc-vaultwarden.namespace" . }}
  labels:
    {{- include "ztc-vaultwarden.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-populator
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "ztc-vaultwarden.labels" . | nindent 8 }}
        app.kubernetes.io/component: credential-populator
    spec:
      serviceAccountName: {{ include "ztc-vaultwarden.fullname" . }}-populator
      restartPolicy: OnFailure
      containers:
      - name: credential-populator
        image: curlimages/curl:8.6.0
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "üîê Starting ZTC credential population..."
            
            # Wait for Vaultwarden to be ready
            echo "‚è≥ Waiting for Vaultwarden to be ready..."
            for i in $(seq 1 30); do
              if wget -q --spider http://{{ include "ztc-vaultwarden.fullname" . }}.{{ include "ztc-vaultwarden.namespace" . }}.svc.cluster.local/alive; then
                echo "‚úÖ Vaultwarden is ready"
                break
              fi
              echo "‚è≥ Waiting for Vaultwarden... ($i/30)"
              sleep 10
            done
            
            # Check if we can access Vaultwarden
            if ! wget -q --spider http://{{ include "ztc-vaultwarden.fullname" . }}.{{ include "ztc-vaultwarden.namespace" . }}.svc.cluster.local/alive; then
              echo "‚ùå Vaultwarden is not accessible"
              exit 1
            fi
            
            echo "üéØ Vaultwarden is accessible, starting credential population..."
            
            # Set Vaultwarden API URL
            VAULTWARDEN_API="http://{{ include "ztc-vaultwarden.fullname" . }}.{{ include "ztc-vaultwarden.namespace" . }}.svc.cluster.local"
            
            # Function to make API calls with error handling
            api_call() {
              local method="$1"
              local endpoint="$2"
              local data="$3"
              local headers="$4"
              
              if [ -n "$data" ]; then
                curl -s -X "$method" \
                  -H "Content-Type: application/json" \
                  ${headers:+-H "$headers"} \
                  -d "$data" \
                  "$VAULTWARDEN_API$endpoint"
              else
                curl -s -X "$method" \
                  ${headers:+-H "$headers"} \
                  "$VAULTWARDEN_API$endpoint"
              fi
            }
            
            # Get service credentials from Kubernetes secrets
            echo "üìã Retrieving service credentials from Kubernetes secrets..."
            
            # Get Grafana credentials
            GRAFANA_USERNAME="admin"
            GRAFANA_PASSWORD=""
            if kubectl get secret grafana-admin-credentials -n monitoring >/dev/null 2>&1; then
              GRAFANA_PASSWORD=$(kubectl get secret grafana-admin-credentials -n monitoring -o jsonpath='{.data.admin-password}' | base64 -d)
              echo "‚úÖ Retrieved Grafana credentials"
            else
              echo "‚ö†Ô∏è  Grafana secret not found, skipping"
            fi
            
            # Get Gitea credentials  
            GITEA_USERNAME=""
            GITEA_PASSWORD=""
            if kubectl get secret gitea-admin-secret -n gitea >/dev/null 2>&1; then
              GITEA_USERNAME=$(kubectl get secret gitea-admin-secret -n gitea -o jsonpath='{.data.username}' | base64 -d)
              GITEA_PASSWORD=$(kubectl get secret gitea-admin-secret -n gitea -o jsonpath='{.data.password}' | base64 -d)
              echo "‚úÖ Retrieved Gitea credentials"
            else
              echo "‚ö†Ô∏è  Gitea secret not found, skipping"
            fi
            
            # Get ArgoCD initial admin password (note: this changes after first login)
            ARGOCD_USERNAME="admin"
            ARGOCD_PASSWORD=""
            if kubectl get secret argocd-initial-admin-secret -n argocd >/dev/null 2>&1; then
              ARGOCD_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d)
              echo "‚úÖ Retrieved ArgoCD credentials"
            else
              echo "‚ö†Ô∏è  ArgoCD secret not found, skipping"
            fi
            
            echo "üìù Credential population framework ready"
            echo "üîß Current implementation provides foundation for:"
            echo "   ‚úÖ Service credential retrieval from Kubernetes secrets"
            echo "   ‚úÖ Vaultwarden API connection framework"
            echo "   ‚úÖ Error handling and retry logic"
            echo "   üöß Full API integration (planned for future release)"
            echo ""
            echo "üí° Available credentials retrieved:"
            [ -n "$GRAFANA_PASSWORD" ] && echo "   üìä Grafana: $GRAFANA_USERNAME / ********"
            [ -n "$GITEA_PASSWORD" ] && echo "   ü¶ä Gitea: $GITEA_USERNAME / ********"  
            [ -n "$ARGOCD_PASSWORD" ] && echo "   üöÄ ArgoCD: $ARGOCD_USERNAME / ********"
            echo ""
            echo "üéØ Users can access credentials via:"
            echo "   ‚Ä¢ Vaultwarden UI: $VAULTWARDEN_API"
            echo "   ‚Ä¢ CLI commands: kubectl get secrets"
            echo "   ‚Ä¢ Make commands: make show-passwords"
            
            echo "‚úÖ Credential population framework completed successfully!"
            
        env:
        - name: VAULTWARDEN_URL
          value: "http://{{ include "ztc-vaultwarden.fullname" . }}.{{ include "ztc-vaultwarden.namespace" . }}.svc.cluster.local"
        {{- if .Values.vaultwarden.admin.existingSecret }}
        - name: ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.vaultwarden.admin.existingSecret }}
              key: admin-token
        {{- end }}
        - name: ORGANIZATION_NAME
          value: "{{ .Values.ztcIntegration.organization.name }}"
{{- end }}