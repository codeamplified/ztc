#!/bin/bash

# Zero Touch Cluster Gitea Repository Setup
# Creates workloads repository and other required repositories after Gitea deployment

# Color codes
CYAN() { echo -e "\033[36m$*\033[0m"; }
GREEN() { echo -e "\033[32m$*\033[0m"; }
YELLOW() { echo -e "\033[33m$*\033[0m"; }
RED() { echo -e "\033[31m$*\033[0m"; }

GREEN "=== Gitea Repository Setup ==="
CYAN "Setting up required repositories in Gitea after deployment..."
echo

# Wait for Gitea to be fully accessible
CYAN "Waiting for Gitea to be ready..."
for i in {1..30}; do
    if curl -s http://gitea.homelab.lan >/dev/null 2>&1; then
        GREEN "✅ Gitea is accessible"
        break
    else
        if [ $i -eq 30 ]; then
            RED "❌ Gitea is not accessible after 5 minutes"
            YELLOW "Check Gitea deployment status: kubectl get pods -n gitea"
            exit 1
        else
            CYAN "Waiting for Gitea... (attempt $i/30)"
            sleep 10
        fi
    fi
done

# Get Gitea admin password from sealed secret
CYAN "Retrieving Gitea admin credentials..."
if ! GITEA_ADMIN_PASSWORD=$(kubectl get secret -n gitea gitea-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d); then
    RED "❌ Failed to retrieve Gitea admin password"
    YELLOW "Ensure Gitea sealed secret exists: kubectl get secret -n gitea gitea-admin-secret"
    exit 1
fi
GREEN "✅ Gitea admin credentials retrieved"

# Create workloads repository
GREEN "\n--- Creating Workloads Repository ---"
CYAN "Creating workloads repository in Gitea..."

# Check if repository already exists
if curl -s --fail -u "ztc-admin:$GITEA_ADMIN_PASSWORD" "http://gitea.homelab.lan/api/v1/repos/ztc-admin/workloads" >/dev/null 2>&1; then
    GREEN "✅ Workloads repository already exists"
else
    # Create the repository
    repo_data='{
        "name": "workloads",
        "description": "ZTC Private Workloads - Managed by template deployment system",
        "private": true,
        "auto_init": true,
        "default_branch": "main"
    }'
    
    if curl -s -X POST -u "ztc-admin:$GITEA_ADMIN_PASSWORD" \
            -H "Content-Type: application/json" \
            -d "$repo_data" \
            "http://gitea.homelab.lan/api/v1/user/repos" >/dev/null 2>&1; then
        GREEN "✅ Workloads repository created successfully"
        
        # Give Gitea time to initialize the repository
        sleep 5
        
        # Initialize repository structure
        CYAN "Initializing repository structure..."
        TEMP_REPO="/tmp/ztc-workloads-init"
        rm -rf "$TEMP_REPO"
        
        # URL encode password for git clone
        ENCODED_PASSWORD=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$GITEA_ADMIN_PASSWORD', safe=''))")
        if git clone "http://ztc-admin:$ENCODED_PASSWORD@gitea.homelab.lan/ztc-admin/workloads.git" "$TEMP_REPO" 2>/dev/null; then
            cd "$TEMP_REPO"
            
            # Configure git
            git config user.email "ztc-admin@homelab.lan"
            git config user.name "ZTC Admin"
            
            # Create directory structure
            mkdir -p apps
            
            # Create README
            cat > README.md <<EOF
# ZTC Workloads Repository

This repository contains Kubernetes manifests for workloads deployed via the ZTC template system.

## Structure

- \`apps/\` - Application manifests organized by workload name
- Each workload gets its own directory under \`apps/\`

## Deployment

Workloads are automatically deployed via ArgoCD when manifests are committed to this repository.

## Available Commands

- \`make deploy-n8n\` - Deploy n8n workflow automation
- \`make deploy-uptime-kuma\` - Deploy Uptime Kuma monitoring
- \`make deploy-homepage\` - Deploy Homepage dashboard
- \`make deploy-vaultwarden\` - Deploy Vaultwarden password manager
- \`make deploy-code-server\` - Deploy Code Server IDE

## Management

- \`make list-workloads\` - List all deployed workloads
- \`make workload-status WORKLOAD=<name>\` - Check workload status

Generated by ZTC on $(date)
EOF
            
            # Create .gitignore
            cat > .gitignore <<EOF
# Temporary files
*.tmp
*.bak
*~

# OS files
.DS_Store
Thumbs.db

# IDE files
.vscode/
.idea/

# Local overrides
*.local
EOF
            
            # Create apps directory README
            cat > apps/README.md <<EOF
# Applications

This directory contains Kubernetes manifests for deployed workloads.

Each subdirectory represents a workload deployed via the ZTC template system.
EOF
            
            # Commit and push
            git add .
            git commit -m "Initial repository setup

- Add README with usage instructions
- Create apps directory structure
- Add .gitignore for common files

Generated by ZTC Gitea repository setup"
            
            if git push origin main 2>/dev/null; then
                GREEN "✅ Repository structure initialized"
            else
                YELLOW "⚠️  Could not push initial structure, but repository exists"
            fi
            
            cd /
            rm -rf "$TEMP_REPO"
        else
            YELLOW "⚠️  Could not initialize repository structure, but repository exists"
        fi
    else
        RED "❌ Failed to create workloads repository"
        YELLOW "Check Gitea status and try again manually"
        exit 1
    fi
fi

GREEN "\n--- Gitea Repository Setup Complete! ---"
GREEN "Workloads repository is ready for template deployments."
echo
CYAN "Next: ArgoCD will be configured to sync from this repository."
CYAN "Ready for workload deployments: make deploy-n8n, make deploy-uptime-kuma, etc."